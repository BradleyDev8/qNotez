This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    release.yml
  FUNDING.yml
src/
  lib/
    electron-app/
      factories/
        app/
          instance.ts
          setup.ts
        ipcs/
          register-window-creation.ts
        windows/
          create.ts
      release/
        constants/
          colors.ts
        modules/
          prebuild.ts
          release.ts
        utils/
          exec.ts
          extractors.ts
          path.ts
          question.ts
          validations.ts
      utils/
        ignore-console-warnings.ts
    electron-router-dom.ts
  main/
    windows/
      main.ts
    index.ts
  preload/
    index.ts
  renderer/
    components/
      ui/
        alert.tsx
      AppLayout.tsx
    lib/
      utils.ts
    screens/
      main.tsx
    globals.css
    index.html
    index.tsx
    routes.tsx
  resources/
    public/
      illustration.svg
  shared/
    constants.ts
    types.ts
    utils.ts
.editorconfig
.gitignore
.npmrc
.nvmrc
biome.json
components.json
electron-builder.ts
electron.vite.config.ts
index.d.ts
package.json
README.md
trusted-dependencies-scripts.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/renderer/components/AppLayout.tsx">
import { forwardRef, ComponentProps } from "react";
import { twMerge } from "tailwind-merge";

export const RootLayout = ({ children, className, ...props }: ComponentProps<'main'>) => {
    return <main className={twMerge('flex flex-row h-screen', className)} {...props}>
        <Sidebar />
        <Content />
    </main>
}

export const Sidebar = ({ className, children }: ComponentProps<'aside'>) => {
    return <aside className={twMerge('w-[250px] mt-10 h-[100vh + 10px] overflow-y-auto', className)}>
        {children}
    </aside>
}

export const Content = forwardRef<HTMLDivElement, ComponentProps<'div'>>(({ children, className }, ref) => {
    return <div ref={ref} className={twMerge('flex-1 overflow-auto', className)}>
        {children}
    </div>
})

Content.displayName = 'Content'
</file>

<file path=".github/workflows/release.yml">
on:
  push:
    tags: ["*"]

jobs:
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - run: npm i -g --force corepack && corepack enable

      - name: Install Node.js, NPM and PNPM
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - run: pnpm install

      - name: apt-update
        if: startsWith(matrix.os, 'ubuntu-latest')
        run: sudo apt-get update

      - name: autoremove
        if: startsWith(matrix.os, 'ubuntu-latest')
        run: sudo apt autoremove

      - name: Install libarchive rpm on Linux
        if: startsWith(matrix.os, 'ubuntu-latest')
        run: sudo apt-get install libarchive-tools rpm

      - name: Release Electron app
        uses: daltonmenezes/action-electron-builder@v1.0.1
        with:
          package_manager: "pnpm"
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: true
</file>

<file path=".github/FUNDING.yml">
github: daltonmenezes
patreon: daltonmenezes
</file>

<file path="src/lib/electron-app/factories/app/instance.ts">
import { app } from 'electron'

export function makeAppWithSingleInstanceLock(fn: () => void) {
  const isPrimaryInstance = app.requestSingleInstanceLock()

  !isPrimaryInstance ? app.quit() : fn()
}
</file>

<file path="src/lib/electron-app/factories/app/setup.ts">
import { app, BrowserWindow } from 'electron'

import {
  installExtension,
  REACT_DEVELOPER_TOOLS,
} from 'electron-extension-installer'

import { ignoreConsoleWarnings } from '../../utils/ignore-console-warnings'
import { PLATFORM, ENVIRONMENT } from 'shared/constants'
import { makeAppId } from 'shared/utils'

ignoreConsoleWarnings(['Manifest version 2 is deprecated'])

export async function makeAppSetup(createWindow: () => Promise<BrowserWindow>) {
  if (ENVIRONMENT.IS_DEV) {
    await installExtension([REACT_DEVELOPER_TOOLS], {
      loadExtensionOptions: {
        allowFileAccess: true,
      },
    })
  }

  let window = await createWindow()

  app.on('activate', async () => {
    const windows = BrowserWindow.getAllWindows()

    if (!windows.length) {
      window = await createWindow()
    } else {
      for (window of windows.reverse()) {
        window.restore()
      }
    }
  })

  app.on('web-contents-created', (_, contents) =>
    contents.on(
      'will-navigate',
      (event, _) => !ENVIRONMENT.IS_DEV && event.preventDefault()
    )
  )

  app.on('window-all-closed', () => !PLATFORM.IS_MAC && app.quit())

  return window
}

PLATFORM.IS_LINUX && app.disableHardwareAcceleration()

PLATFORM.IS_WINDOWS &&
  app.setAppUserModelId(ENVIRONMENT.IS_DEV ? process.execPath : makeAppId())

app.commandLine.appendSwitch('force-color-profile', 'srgb')
</file>

<file path="src/lib/electron-app/factories/ipcs/register-window-creation.ts">
import { ipcMain } from 'electron'

import type { WindowCreationByIPC, BrowserWindowOrNull } from 'shared/types'

export function registerWindowCreationByIPC({
  channel,
  callback,
  window: createWindow,
}: WindowCreationByIPC) {
  let window: BrowserWindowOrNull

  ipcMain.handle(channel, event => {
    if (!createWindow || window) return

    window = createWindow() as NonNullable<BrowserWindowOrNull>

    window.on('closed', () => {
      window = null
    })

    callback?.(window, event)
  })
}
</file>

<file path="src/lib/electron-app/factories/windows/create.ts">
import { BrowserWindow } from 'electron'
import { join } from 'node:path'

import type { WindowProps } from 'shared/types'

import { registerRoute } from 'lib/electron-router-dom'

export function createWindow({ id, ...settings }: WindowProps) {
  const window = new BrowserWindow(settings)

  registerRoute({
    id,
    browserWindow: window,
    htmlFile: join(__dirname, '../renderer/index.html'),
  })

  window.on('closed', window.destroy)

  return window
}
</file>

<file path="src/lib/electron-app/release/constants/colors.ts">
export const COLORS = {
  RED: '\x1b[31m',
  RESET: '\x1b[0m',
  GRAY: '\x1b[90m',
  BLUE: '\x1b[34m',
  CYAN: '\x1b[36m',
  GREEN: '\x1b[32m',
  WHITE: '\x1b[37m',
  YELLOW: '\x1b[33m',
  MAGENTA: '\x1b[35m',
  LIGHT_GRAY: '\x1b[37m',
  SOFT_GRAY: '\x1b[38;5;244m',
}
</file>

<file path="src/lib/electron-app/release/modules/prebuild.ts">
import { writeFile } from 'node:fs/promises'
import { resolve } from 'node:path'

import trustedDependencies from '../../../../../trusted-dependencies-scripts.json'
import packageJSON from '../../../../../package.json'
import { getDevFolder } from '../utils/path'

async function createPackageJSONDistVersion() {
  const { main, scripts, resources, devDependencies, ...rest } = packageJSON

  const packageJSONDistVersion = {
    main: './main/index.js',
    ...rest,
  }

  try {
    await Promise.all([
      writeFile(
        resolve(getDevFolder(main), 'package.json'),
        JSON.stringify(packageJSONDistVersion, null, 2)
      ),

      writeFile(
        resolve(getDevFolder(main), packageJSON.pnpm.onlyBuiltDependenciesFile),
        JSON.stringify(trustedDependencies, null, 2)
      ),
    ])
  } catch ({ message }: any) {
    console.log(`
    üõë Something went wrong!\n
      üßê There was a problem creating the package.json dist version...\n
      üëÄ Error: ${message}
    `)
  }
}

createPackageJSONDistVersion()
</file>

<file path="src/lib/electron-app/release/modules/release.ts">
import { writeFile } from 'node:fs/promises'
import { resolve } from 'node:path'
import open from 'open'

import { extractOwnerAndRepoFromGitRemoteURL } from '../utils/extractors'
import packageJSON from '../../../../../package.json'
import { checkValidations } from '../utils/validations'
import { question } from '../utils/question'
import { COLORS } from '../constants/colors'
import { exec } from '../utils/exec'

async function makeRelease() {
  console.clear()

  const { version } = packageJSON

  const newVersion = await question(
    `Enter a new version: ${COLORS.SOFT_GRAY}(current is ${version})${COLORS.RESET} `
  )

  if (checkValidations({ version, newVersion })) {
    return
  }

  packageJSON.version = newVersion

  try {
    console.log(
      `${COLORS.CYAN}> Updating package.json version...${COLORS.RESET}`
    )

    await writeFile(
      resolve('package.json'),
      JSON.stringify(packageJSON, null, 2)
    )

    console.log(`\n${COLORS.GREEN}Done!${COLORS.RESET}\n`)
    console.log(`${COLORS.CYAN}> Trying to release it...${COLORS.RESET}`)

    exec(
      [
        `git commit -am v${newVersion}`,
        `git tag v${newVersion}`,
        'git push',
        'git push --tags',
      ],
      {
        inherit: true,
      }
    )

    const [repository] = exec(['git remote get-url --push origin'])
    const ownerAndRepo = extractOwnerAndRepoFromGitRemoteURL(repository)

    console.log(
      `${COLORS.CYAN}> Opening the repository releases page...${COLORS.RESET}`
    )

    await open(`https://github.com/${ownerAndRepo}/releases`)

    console.log(
      `${COLORS.CYAN}> Opening the repository actions page...${COLORS.RESET}`
    )

    await open(`https://github.com/${ownerAndRepo}/actions`)

    console.log(`\n${COLORS.GREEN}Done!${COLORS.RESET}\n`)
  } catch ({ message }: any) {
    console.log(`
    üõë Something went wrong!\n
      üëÄ Error: ${message}
    `)
  }
}

makeRelease()
</file>

<file path="src/lib/electron-app/release/utils/exec.ts">
import {
  execSync,
  type ExecSyncOptionsWithStringEncoding,
} from 'node:child_process'

import { resolve } from 'node:path'

interface Options {
  inherit?: boolean
}

function makeOptions(
  options?: Options
): Partial<ExecSyncOptionsWithStringEncoding> {
  return {
    stdio: options?.inherit ? 'inherit' : 'pipe',
    cwd: resolve(),
    encoding: 'utf8',
  }
}

export function exec(commands: string[], options?: Options) {
  const outputs = []

  for (const command of commands) {
    const output = execSync(command, makeOptions(options)) as string
    outputs.push(output)
  }

  return outputs
}
</file>

<file path="src/lib/electron-app/release/utils/extractors.ts">
export function extractOwnerAndRepoFromGitRemoteURL(url: string) {
  return url
    ?.replace(/^git@github.com:|.git$/gims, '')
    ?.replace(/^https:\/\/github.com\/|.git$/gims, '')
    ?.trim()
}
</file>

<file path="src/lib/electron-app/release/utils/path.ts">
import { normalize, dirname } from 'node:path'

export function getDevFolder(path: string) {
  const [nodeModules, devFolder] = normalize(dirname(path)).split(/\/|\\/g)

  return [nodeModules, devFolder].join('/')
}
</file>

<file path="src/lib/electron-app/release/utils/question.ts">
import Readline from 'node:readline'

export function question(question: string): Promise<string> {
  const readline = Readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  })

  return new Promise(resolve => {
    readline.question(question, answer => {
      readline.close()
      resolve(answer)
    })
  })
}
</file>

<file path="src/lib/electron-app/release/utils/validations.ts">
import semver from 'semver'

import { COLORS } from '../constants/colors'

export function checkValidations({
  version,
  newVersion,
}: { version: string; newVersion: string }) {
  if (!newVersion) {
    console.log(`${COLORS.RED}No version entered${COLORS.RESET}`)

    return true
  }

  if (!semver.valid(newVersion)) {
    console.log(
      `${COLORS.RED}Version must have a semver format (${COLORS.SOFT_GRAY}x.x.x${COLORS.RESET} example: ${COLORS.GREEN}1.0.1${COLORS.RESET}${COLORS.RED})${COLORS.RESET}`
    )

    return true
  }

  if (semver.ltr(newVersion, version)) {
    console.log(
      `${COLORS.RED}New version is lower than current version${COLORS.RESET}`
    )

    return true
  }

  if (semver.eq(newVersion, version)) {
    console.log(
      `${COLORS.RED}New version is equal to current version${COLORS.RESET}`
    )

    return true
  }
}
</file>

<file path="src/lib/electron-app/utils/ignore-console-warnings.ts">
export function ignoreConsoleWarnings(warningsToIgnore: string[]) {
  const originalEmitWarning = process.emitWarning

  process.emitWarning = (warning, ...args) => {
    if (
      typeof warning === 'string' &&
      warningsToIgnore.length > 0 &&
      warningsToIgnore.some(ignoredWarning => warning.includes(ignoredWarning))
    ) {
      return
    }

    originalEmitWarning(warning, ...(args as string[]))
  }
}
</file>

<file path="src/lib/electron-router-dom.ts">
import { createElectronRouter } from 'electron-router-dom'

export const { Router, registerRoute, settings } = createElectronRouter({
  port: 4927,

  types: {
    ids: ['main', 'about'],
  },
})
</file>

<file path="src/main/windows/main.ts">
import { BrowserWindow } from 'electron'
import { join } from 'node:path'

import { createWindow } from 'lib/electron-app/factories/windows/create'
import { ENVIRONMENT } from 'shared/constants'
import { displayName } from '~/package.json'

export async function MainWindow() {
  const window = createWindow({
    id: 'main',
    title: displayName,
    width: 700,
    height: 473,
    show: false,
    center: true,
    movable: true,
    resizable: false,
    alwaysOnTop: true,
    autoHideMenuBar: true,
    vibrancy: 'under-window',
    visualEffectState: 'active',
    titleBarStyle: 'hidden',
    trafficLightPosition: {
      x: 15,
      y: 10,
    },
    webPreferences: {
      preload: join(__dirname, '../preload/index.js'),
    },
  })

  window.webContents.on('did-finish-load', () => {
    if (ENVIRONMENT.IS_DEV) {
      window.webContents.openDevTools({ mode: 'detach' })
    }

    window.show()
  })

  window.on('close', () => {
    for (const window of BrowserWindow.getAllWindows()) {
      window.destroy()
    }
  })

  return window
}
</file>

<file path="src/main/index.ts">
import { app } from 'electron'

import { makeAppWithSingleInstanceLock } from 'lib/electron-app/factories/app/instance'
import { makeAppSetup } from 'lib/electron-app/factories/app/setup'
import { MainWindow } from './windows/main'

makeAppWithSingleInstanceLock(async () => {
  await app.whenReady()
  await makeAppSetup(MainWindow)
})
</file>

<file path="src/preload/index.ts">
import { contextBridge } from 'electron'

declare global {
  interface Window {
    App: typeof API
  }
}

const API = {
  sayHelloFromBridge: () => console.log('\nHello from bridgeAPI! üëã\n\n'),
  username: process.env.USER,
}

contextBridge.exposeInMainWorld('App', API)
</file>

<file path="src/renderer/components/ui/alert.tsx">
import type * as React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from 'renderer/lib/utils'

const alertVariants = cva(
  'relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current',
  {
    variants: {
      variant: {
        default: 'bg-background text-foreground',
        destructive:
          'text-destructive-foreground [&>svg]:text-current *:data-[slot=alert-description]:text-destructive-foreground/80',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        'col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight',
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        'text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed',
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/renderer/lib/utils.ts">
import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/renderer/screens/main.tsx">
import { useEffect } from 'react'
import { RootLayout, Sidebar, Content } from 'renderer/components/AppLayout'

// The "App" comes from the context bridge in preload/index.ts
const { App } = window

export function MainScreen() {
  return (
    <RootLayout>
      <Sidebar className="py-2 border-4 border-red-500">
        <Content className="border-4 border-blue-500">
          <h1>Hello</h1>
        </Content>
      </Sidebar>
    </RootLayout>
  )
}
</file>

<file path="src/renderer/globals.css">
@import "tailwindcss";

@plugin 'tailwindcss-animate';

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
    @apply antialiased;
  }

  body {
    @apply bg-background text-foreground;
  }

  html,
  body {
    user-select: none;
    scroll-behavior: smooth;
    -webkit-app-region: no-drag;
    -webkit-font-smoothing: antialiased;
  }
}

body {
  @apply bg-transparent;
}
</file>

<file path="src/renderer/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />

    <!--
      https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP

      If you want restrict the sources from where you can load resources:
        <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'" />
    -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self' *; script-src 'self' *; style-src 'self' 'unsafe-inline' *;" />
  </head>

  <body>
    <app></app>
    <script type="module" src="index.tsx"></script>
  </body>
</html>
</file>

<file path="src/renderer/index.tsx">
import ReactDom from 'react-dom/client'
import React from 'react'

import { AppRoutes } from './routes'

import './globals.css'

ReactDom.createRoot(document.querySelector('app') as HTMLElement).render(
  <React.StrictMode>
    <AppRoutes />
  </React.StrictMode>
)
</file>

<file path="src/renderer/routes.tsx">
import { Route } from 'react-router-dom'

import { Router } from 'lib/electron-router-dom'

import { MainScreen } from './screens/main'

export function AppRoutes() {
  return <Router main={<Route path="/" element={<MainScreen />} />} />
}
</file>

<file path="src/resources/public/illustration.svg">
<svg width="488" height="305" viewBox="0 0 488 305" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M77.4293 138.335C73.3508 117.138 81.9112 93.2782 99.8389 85.0906C113.957 78.6611 135.56 76.5514 164.513 84.3371C241.064 105.032 234.431 81.3735 264.146 62.8887C290.276 46.614 322.187 26.6724 377.629 64.3454C419.669 92.9265 394.794 137.531 423.165 164.907C441.406 182.488 410.616 267.679 322.232 249.194C233.848 230.709 213.769 256.678 173.746 266.222C133.498 275.816 50.4033 218.654 72.8129 192.283C86.0346 176.761 79.984 151.646 77.4293 138.335Z" fill="#BAC6F2"/>
<path d="M91.637 154.861C93.6173 154.861 95.2226 153.062 95.2226 150.842C95.2226 148.623 93.6173 146.824 91.637 146.824C89.6568 146.824 88.0515 148.623 88.0515 150.842C88.0515 153.062 89.6568 154.861 91.637 154.861Z" fill="white"/>
<path d="M119.649 128.741C120.763 128.741 121.666 127.729 121.666 126.481C121.666 125.232 120.763 124.22 119.649 124.22C118.535 124.22 117.632 125.232 117.632 126.481C117.632 127.729 118.535 128.741 119.649 128.741Z" fill="white"/>
<path d="M126.596 190.022C127.834 190.022 128.837 188.898 128.837 187.511C128.837 186.124 127.834 184.999 126.596 184.999C125.358 184.999 124.355 186.124 124.355 187.511C124.355 188.898 125.358 190.022 126.596 190.022Z" fill="white"/>
<path d="M107.548 225.184C108.909 225.184 110.013 223.947 110.013 222.421C110.013 220.895 108.909 219.658 107.548 219.658C106.186 219.658 105.083 220.895 105.083 222.421C105.083 223.947 106.186 225.184 107.548 225.184Z" fill="white"/>
<path d="M164.468 236.737C165.83 236.737 166.933 235.5 166.933 233.974C166.933 232.448 165.83 231.211 164.468 231.211C163.107 231.211 162.003 232.448 162.003 233.974C162.003 235.5 163.107 236.737 164.468 236.737Z" fill="white"/>
<path d="M270.914 235.732C272.399 235.732 273.603 234.383 273.603 232.718C273.603 231.054 272.399 229.704 270.914 229.704C269.429 229.704 268.225 231.054 268.225 232.718C268.225 234.383 269.429 235.732 270.914 235.732Z" fill="white"/>
<path d="M315.061 170.935C316.422 170.935 317.526 169.698 317.526 168.172C317.526 166.646 316.422 165.409 315.061 165.409C313.7 165.409 312.596 166.646 312.596 168.172C312.596 169.698 313.7 170.935 315.061 170.935Z" fill="white"/>
<path d="M348.899 132.759C349.89 132.759 350.692 131.86 350.692 130.75C350.692 129.64 349.89 128.741 348.899 128.741C347.909 128.741 347.107 129.64 347.107 130.75C347.107 131.86 347.909 132.759 348.899 132.759Z" fill="white"/>
<path d="M376.463 141.801C377.825 141.801 378.928 140.564 378.928 139.038C378.928 137.512 377.825 136.276 376.463 136.276C375.102 136.276 373.998 137.512 373.998 139.038C373.998 140.564 375.102 141.801 376.463 141.801Z" fill="white"/>
<path d="M396.856 106.639C398.094 106.639 399.097 105.515 399.097 104.128C399.097 102.741 398.094 101.616 396.856 101.616C395.618 101.616 394.615 102.741 394.615 104.128C394.615 105.515 395.618 106.639 396.856 106.639Z" fill="white"/>
<path d="M392.822 208.608C394.06 208.608 395.063 207.483 395.063 206.096C395.063 204.709 394.06 203.584 392.822 203.584C391.585 203.584 390.581 204.709 390.581 206.096C390.581 207.483 391.585 208.608 392.822 208.608Z" fill="white"/>
<path d="M355.846 239.75C357.208 239.75 358.311 238.514 358.311 236.988C358.311 235.462 357.208 234.225 355.846 234.225C354.485 234.225 353.381 235.462 353.381 236.988C353.381 238.514 354.485 239.75 355.846 239.75Z" fill="white"/>
<path d="M221.613 204.087C223.841 204.087 225.647 202.063 225.647 199.566C225.647 197.069 223.841 195.045 221.613 195.045C219.385 195.045 217.579 197.069 217.579 199.566C217.579 202.063 219.385 204.087 221.613 204.087Z" fill="white"/>
<path d="M241.333 154.861C243.561 154.861 245.367 152.837 245.367 150.34C245.367 147.843 243.561 145.819 241.333 145.819C239.106 145.819 237.3 147.843 237.3 150.34C237.3 152.837 239.106 154.861 241.333 154.861Z" fill="white"/>
<path d="M292.875 133.262C295.103 133.262 296.909 131.238 296.909 128.741C296.909 126.244 295.103 124.22 292.875 124.22C290.648 124.22 288.842 126.244 288.842 128.741C288.842 131.238 290.648 133.262 292.875 133.262Z" fill="white"/>
<path d="M292.651 201.575C295.003 201.575 296.909 199.439 296.909 196.803C296.909 194.168 295.003 192.031 292.651 192.031C290.3 192.031 288.393 194.168 288.393 196.803C288.393 199.439 290.3 201.575 292.651 201.575Z" fill="white"/>
<path d="M336.574 195.045C338.926 195.045 340.832 192.909 340.832 190.273C340.832 187.638 338.926 185.501 336.574 185.501C334.223 185.501 332.316 187.638 332.316 190.273C332.316 192.909 334.223 195.045 336.574 195.045Z" fill="white"/>
<path d="M205.03 174.451C207.257 174.451 209.063 172.427 209.063 169.93C209.063 167.433 207.257 165.409 205.03 165.409C202.802 165.409 200.996 167.433 200.996 169.93C200.996 172.427 202.802 174.451 205.03 174.451Z" fill="white"/>
<path d="M231.025 214.635C233.253 214.635 235.059 212.611 235.059 210.114C235.059 207.618 233.253 205.594 231.025 205.594C228.797 205.594 226.991 207.618 226.991 210.114C226.991 212.611 228.797 214.635 231.025 214.635Z" fill="white"/>
<path d="M260.157 179.976C262.385 179.976 264.191 177.952 264.191 175.455C264.191 172.959 262.385 170.935 260.157 170.935C257.93 170.935 256.124 172.959 256.124 175.455C256.124 177.952 257.93 179.976 260.157 179.976Z" fill="white"/>
<path d="M155.953 192.031C158.057 192.031 159.762 190.12 159.762 187.762C159.762 185.404 158.057 183.492 155.953 183.492C153.849 183.492 152.143 185.404 152.143 187.762C152.143 190.12 153.849 192.031 155.953 192.031Z" fill="white"/>
<path d="M194.497 137.23C196.601 137.23 198.307 135.318 198.307 132.96C198.307 130.602 196.601 128.691 194.497 128.691C192.393 128.691 190.688 130.602 190.688 132.96C190.688 135.318 192.393 137.23 194.497 137.23Z" fill="white"/>
<path d="M77.0259 220.864L91.637 150.842L154.384 188.013L204.581 169.93L221.613 199.566L231.025 211.621L260.157 174.953L292.427 197.557L335.902 190.022" stroke="white" stroke-width="0.767045" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M206.329 169.93L240.795 149.788L292.875 128.741" stroke="white" stroke-width="0.767045" stroke-miterlimit="10"/>
<path d="M158.194 104.128C159.307 104.128 160.21 103.116 160.21 101.868C160.21 100.619 159.307 99.6072 158.194 99.6072C157.08 99.6072 156.177 100.619 156.177 101.868C156.177 103.116 157.08 104.128 158.194 104.128Z" fill="white"/>
<path d="M304.528 64.4458C305.519 64.4458 306.321 63.5463 306.321 62.4366C306.321 61.3269 305.519 60.4274 304.528 60.4274C303.538 60.4274 302.736 61.3269 302.736 62.4366C302.736 63.5463 303.538 64.4458 304.528 64.4458Z" fill="white"/>
<path d="M197.635 114.174C198.748 114.174 199.651 113.162 199.651 111.914C199.651 110.665 198.748 109.653 197.635 109.653C196.521 109.653 195.618 110.665 195.618 111.914C195.618 113.162 196.521 114.174 197.635 114.174Z" fill="white"/>
<path d="M261.054 99.6072C262.044 99.6072 262.847 98.7077 262.847 97.598C262.847 96.4883 262.044 95.5888 261.054 95.5888C260.064 95.5888 259.261 96.4883 259.261 97.598C259.261 98.7077 260.064 99.6072 261.054 99.6072Z" fill="white"/>
<path d="M155.056 150.842C155.923 150.842 156.625 150.055 156.625 149.084C156.625 148.113 155.923 147.326 155.056 147.326C154.19 147.326 153.488 148.113 153.488 149.084C153.488 150.055 154.19 150.842 155.056 150.842Z" fill="white"/>
<path d="M332.765 81.5242C334.25 81.5242 335.454 80.1749 335.454 78.5104C335.454 76.8459 334.25 75.4965 332.765 75.4965C331.279 75.4965 330.075 76.8459 330.075 78.5104C330.075 80.1749 331.279 81.5242 332.765 81.5242Z" fill="white"/>
<path d="M281.671 108.146C282.661 108.146 283.463 107.247 283.463 106.137C283.463 105.028 282.661 104.128 281.671 104.128C280.68 104.128 279.878 105.028 279.878 106.137C279.878 107.247 280.68 108.146 281.671 108.146Z" fill="white"/>
<path d="M100.601 99.6072C101.839 99.6072 102.842 98.4828 102.842 97.0957C102.842 95.7086 101.839 94.5842 100.601 94.5842C99.3632 94.5842 98.3599 95.7086 98.3599 97.0957C98.3599 98.4828 99.3632 99.6072 100.601 99.6072Z" fill="white"/>
<path d="M367.724 172.442C368.961 172.442 369.965 171.317 369.965 169.93C369.965 168.543 368.961 167.418 367.724 167.418C366.486 167.418 365.483 168.543 365.483 169.93C365.483 171.317 366.486 172.442 367.724 172.442Z" fill="white"/>
<path d="M392.822 206.096L367.724 169.93L376.239 138.787L348.899 130.75" stroke="white" stroke-width="0.767045" stroke-miterlimit="10"/>
<path d="M346.255 104.178L371.444 70.5739L401.383 98.8035L376.239 132.358L346.255 104.178Z" fill="url(#paint0_linear_2_2)" stroke="url(#paint1_linear_2_2)" stroke-width="1.27841" stroke-miterlimit="10"/>
<path d="M338.86 109.603L344.373 102.219L376.777 132.358L371.264 139.792L338.86 109.603Z" fill="url(#paint2_linear_2_2)" stroke="url(#paint3_linear_2_2)" stroke-width="0.255682" stroke-miterlimit="10"/>
<path d="M382.783 103.425C380.676 103.425 355.174 111.462 355.174 111.462L374.939 130.198L378.435 120.453C378.435 120.503 383.41 103.425 382.783 103.425Z" fill="white"/>
<path d="M372.698 66.2039H333.347V110.306H372.698V66.2039Z" fill="url(#paint4_linear_2_2)" stroke="url(#paint5_linear_2_2)" stroke-width="0.255682" stroke-miterlimit="10"/>
<path d="M372.385 65.8523H333.033V109.955H372.385V65.8523Z" stroke="url(#paint6_linear_2_2)" stroke-width="1.27841" stroke-miterlimit="10"/>
<path d="M372.833 110.055H332.585V119.9H372.833V110.055Z" fill="url(#paint7_linear_2_2)"/>
<path d="M354.995 109.151L366.155 88.2049L371.937 97.2966V109.603H367.41L354.995 109.151Z" fill="white"/>
<path d="M344.373 109.452L357.594 89.6113L368.127 109.603L344.373 109.452Z" fill="white"/>
<path d="M345.404 74.3412C347.152 74.3412 348.541 75.8984 348.541 77.8574C348.541 79.8164 347.152 81.3735 345.404 81.3735C343.656 81.3735 342.266 79.8164 342.266 77.8574C342.221 75.9486 343.656 74.3412 345.404 74.3412Z" fill="white"/>
<path d="M100.197 165.761L167.426 162.647L177.421 110.105L109.117 110.758L98.9425 165.711" fill="url(#paint8_linear_2_2)"/>
<path d="M100.197 165.761L167.426 162.647L177.421 110.105L109.117 110.758L98.9425 165.711" stroke="url(#paint9_linear_2_2)" stroke-width="0.255682" stroke-miterlimit="10"/>
<path d="M139.011 144.363C141.263 144.363 143.09 142.204 143.09 139.541C143.09 136.877 141.263 134.718 139.011 134.718C136.758 134.718 134.932 136.877 134.932 139.541C134.932 142.204 136.758 144.363 139.011 144.363Z" fill="white"/>
<path d="M99.57 161.843L62.863 161.793C62.6389 161.793 62.4597 161.943 62.37 162.194L61.877 164.656C61.8322 164.957 61.9667 165.208 62.2356 165.259C62.2804 165.259 62.2804 165.259 62.3252 165.259L98.9425 165.66C99.1666 165.66 99.3459 165.51 99.4356 165.259L100.063 162.446C100.108 162.144 99.9734 161.843 99.7045 161.843C99.6596 161.843 99.6148 161.843 99.57 161.843Z" fill="url(#paint10_linear_2_2)" stroke="url(#paint11_linear_2_2)" stroke-width="0.255682" stroke-miterlimit="10"/>
<path d="M107.996 109.302L176.301 108.749C176.39 108.749 176.48 108.799 176.569 108.9L177.466 110.105L109.385 110.758C109.251 110.758 109.116 110.859 109.072 111.06L100.197 165.459C100.197 165.61 100.018 165.761 99.8837 165.761H99.3011C99.1218 165.761 98.9874 165.61 98.9874 165.409C98.9874 165.409 98.9874 165.409 98.9874 165.359L107.458 109.904C107.458 109.553 107.727 109.302 107.996 109.302Z" fill="url(#paint12_linear_2_2)"/>
<path d="M268.628 235.782C268.628 235.782 264.326 218.252 246.712 217.147C229.098 216.042 228.47 216.494 225.288 216.996C223.45 217.247 222.375 219.407 225.288 220.964C228.246 222.572 227.484 223.777 231.607 222.923C235.731 222.069 238.465 226.791 240.84 227.042C243.216 227.293 244.964 226.741 251.687 226.439C257.827 226.138 265.132 230.709 266.208 233.17C267.284 235.632 272.572 233.723 272.572 233.723L268.628 235.782Z" fill="url(#paint13_linear_2_2)"/>
<path d="M267.149 233.823C267.149 233.823 264.326 217.096 248.684 215.69C233.042 214.284 228.829 216.695 226.005 216.996C224.392 217.197 229.008 217.046 231.608 218.553C234.207 220.06 233.58 219.759 237.21 219.96C241.423 220.211 243.664 221.467 245.77 220.814C248.863 219.909 249.446 223.626 255.407 223.476C260.785 223.325 263.967 229.051 264.953 231.312C265.939 233.572 270.6 232.015 270.6 232.015L267.149 233.823Z" fill="url(#paint14_linear_2_2)"/>
<path d="M278.488 225.033L279.25 222.823C279.609 221.768 280.192 220.864 280.953 220.11C284.718 216.494 296.192 204.438 296.864 189.922C296.864 189.821 296.775 189.671 296.64 189.671H296.595C296.551 189.671 296.551 189.671 296.506 189.671C294.579 190.525 284.853 195.548 277.278 214.836C277.144 215.138 277.009 215.539 276.965 215.891C276.875 216.544 276.696 217.699 276.651 218.302C276.606 219.156 277.771 219.909 277.278 221.366C276.785 222.823 275.934 226.339 275.934 226.339L278.085 226.791L278.488 225.033Z" fill="url(#paint15_linear_2_2)"/>
<path d="M270.735 227.997C270.735 227.997 258.454 188.917 243.35 182.739C229.456 177.063 233.535 186.958 234.297 188.616C234.341 188.766 234.476 188.867 234.566 188.967C238.734 192.383 241.781 197.205 243.171 202.781C244.515 208.658 251.059 204.237 253.927 209.21C256.796 214.183 262.667 221.015 264.057 224.882C265.401 228.75 266.97 232.417 266.97 232.417L270.735 230.508V227.997Z" fill="url(#paint16_linear_2_2)"/>
<path d="M270.735 228.147C270.735 228.047 270.69 227.946 270.69 227.846C269.883 225.284 257.961 188.716 243.35 182.739C229.546 177.063 233.535 186.807 234.341 188.515C234.431 188.716 234.61 188.867 234.79 188.967C235.955 189.721 241.064 192.936 243.529 190.876C250.342 185.351 248.101 198.963 254.465 202.178C259.53 204.69 264.774 219.909 266.163 223.827C266.925 226.038 267.508 228.298 267.911 230.609C268.046 231.211 268.583 231.513 269.076 231.362C269.121 231.362 269.121 231.362 269.166 231.312C269.256 231.262 269.3 231.262 269.345 231.262L270.018 230.91C270.421 230.709 270.69 230.307 270.69 229.805L270.735 228.147Z" fill="url(#paint17_linear_2_2)"/>
<path d="M275.306 228.348C275.306 228.348 271.541 217.75 274.186 208.557C274.948 206.046 276.337 203.836 278.175 202.178C279.609 200.922 281.581 198.059 281.805 192.031C281.805 192.031 283.194 182.889 286.601 178.469C290.007 174.049 285.615 176.159 285.615 176.159C285.615 176.159 274.41 185.451 270.018 197.808C269.749 198.561 269.435 199.365 269.032 200.068C267.642 202.731 264.55 211.722 272.214 228.85L275.306 228.348Z" fill="url(#paint18_linear_2_2)"/>
<path d="M285.659 221.718C285.659 221.718 285.301 220.361 283.867 221.215C282.612 221.969 260.785 233.572 260.785 233.572C260.785 233.572 259.754 234.125 260.202 234.928C260.65 235.732 272.662 254.267 273.2 254.518C273.424 254.719 273.738 254.769 274.051 254.719C274.5 254.619 289.738 246.28 289.738 246.28C290.097 246.029 290.186 245.577 290.052 245.125C290.007 245.175 285.794 221.969 285.659 221.718Z" fill="url(#paint19_linear_2_2)"/>
<defs>
<linearGradient id="paint0_linear_2_2" x1="378.477" y1="131.928" x2="366.864" y2="71.4693" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint1_linear_2_2" x1="378.791" y1="133.992" x2="366.514" y2="70.0651" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint2_linear_2_2" x1="338.913" y1="121.091" x2="376.724" y2="120.934" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint3_linear_2_2" x1="338.597" y1="121.093" x2="377.04" y2="120.933" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint4_linear_2_2" x1="333.35" y1="88.2523" x2="372.704" y2="88.2523" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint5_linear_2_2" x1="333.126" y1="88.2523" x2="372.928" y2="88.2523" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint6_linear_2_2" x1="331.918" y1="87.9237" x2="373.513" y2="87.9237" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint7_linear_2_2" x1="332.581" y1="114.997" x2="372.851" y2="114.997" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint8_linear_2_2" x1="98.9322" y1="137.924" x2="177.434" y2="137.924" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint9_linear_2_2" x1="98.7128" y1="137.923" x2="177.712" y2="137.923" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint10_linear_2_2" x1="61.869" y1="163.776" x2="100.064" y2="163.776" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint11_linear_2_2" x1="61.6449" y1="163.776" x2="100.288" y2="163.776" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint12_linear_2_2" x1="98.9537" y1="137.239" x2="177.456" y2="137.239" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
<linearGradient id="paint13_linear_2_2" x1="230.463" y1="235.361" x2="266.544" y2="219.821" gradientUnits="userSpaceOnUse">
<stop stop-color="#93FD93"/>
<stop offset="0.51" stop-color="#21C2C1"/>
<stop offset="1" stop-color="#84F599"/>
</linearGradient>
<linearGradient id="paint14_linear_2_2" x1="238.174" y1="216.05" x2="270.738" y2="229.619" gradientUnits="userSpaceOnUse">
<stop stop-color="#93FD93"/>
<stop offset="0.51" stop-color="#21C2C1"/>
<stop offset="1" stop-color="#84F599"/>
</linearGradient>
<linearGradient id="paint15_linear_2_2" x1="274.061" y1="234.399" x2="294.352" y2="198.091" gradientUnits="userSpaceOnUse">
<stop stop-color="#93FD93"/>
<stop offset="0.51" stop-color="#21C2C1"/>
<stop offset="1" stop-color="#84F599"/>
</linearGradient>
<linearGradient id="paint16_linear_2_2" x1="275.734" y1="218.779" x2="236.715" y2="201.852" gradientUnits="userSpaceOnUse">
<stop stop-color="#93FD93"/>
<stop offset="0.51" stop-color="#21C2C1"/>
<stop offset="1" stop-color="#84F599"/>
</linearGradient>
<linearGradient id="paint17_linear_2_2" x1="243.94" y1="210.746" x2="260.972" y2="203.411" gradientUnits="userSpaceOnUse">
<stop stop-color="#93FD93"/>
<stop offset="0.51" stop-color="#21C2C1"/>
<stop offset="1" stop-color="#84F599"/>
</linearGradient>
<linearGradient id="paint18_linear_2_2" x1="271.827" y1="232.633" x2="278.514" y2="194.517" gradientUnits="userSpaceOnUse">
<stop stop-color="#93FD93"/>
<stop offset="0.51" stop-color="#21C2C1"/>
<stop offset="1" stop-color="#84F599"/>
</linearGradient>
<linearGradient id="paint19_linear_2_2" x1="264.8" y1="245.596" x2="291.088" y2="234.274" gradientUnits="userSpaceOnUse">
<stop stop-color="#E5A4ED"/>
<stop offset="1" stop-color="#7A5BF5"/>
</linearGradient>
</defs>
</svg>
</file>

<file path="src/shared/constants.ts">
export const ENVIRONMENT = {
  IS_DEV: process.env.NODE_ENV === 'development',
}

export const PLATFORM = {
  IS_MAC: process.platform === 'darwin',
  IS_WINDOWS: process.platform === 'win32',
  IS_LINUX: process.platform === 'linux',
}
</file>

<file path="src/shared/types.ts">
import type { BrowserWindow, IpcMainInvokeEvent } from 'electron'

import type { registerRoute } from 'lib/electron-router-dom'

export type BrowserWindowOrNull = Electron.BrowserWindow | null

type Route = Parameters<typeof registerRoute>[0]

export interface WindowProps extends Electron.BrowserWindowConstructorOptions {
  id: Route['id']
  query?: Route['query']
}

export interface WindowCreationByIPC {
  channel: string
  window(): BrowserWindowOrNull
  callback(window: BrowserWindow, event: IpcMainInvokeEvent): void
}
</file>

<file path="src/shared/utils.ts">
import { author as _author, name } from '~/package.json'

const author = _author.name ?? _author
const authorInKebabCase = author.replace(/\s+/g, '-')
const appId = `com.${authorInKebabCase}.${name}`.toLowerCase()

/**
 * @param {string} id
 * @description Create the app id using the name and author from package.json transformed to kebab case if the id is not provided.
 * @default 'com.{author}.{app}' - the author and app comes from package.json
 * @example
 * makeAppId('com.example.app')
 * // => 'com.example.app'
 */
export function makeAppId(id: string = appId): string {
  return id
}
</file>

<file path=".editorconfig">
root = true

[*]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.md]
trim_trailing_whitespace = false
</file>

<file path=".gitignore">
# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build
/dist

# misc
.DS_Store
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.eslintcache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path=".npmrc">
auto-install-peers=true
shamefully-hoist=true
strict-peer-dependencies=false
</file>

<file path=".nvmrc">
20
</file>

<file path="biome.json">
{
  "$schema": "./node_modules/@biomejs/biome/configuration_schema.json",
  "organizeImports": {
    "enabled": true
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space",
    "indentWidth": 2,
    "lineWidth": 80,
    "lineEnding": "lf"
  },
  "javascript": {
    "formatter": {
      "arrowParentheses": "asNeeded",
      "jsxQuoteStyle": "double",
      "quoteStyle": "single",
      "semicolons": "asNeeded",
      "trailingCommas": "es5"
    }
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "a11y": {
        "noSvgWithoutTitle": "off",
        "useButtonType": "off"
      },
      "suspicious": {
        "noArrayIndexKey": "info",
        "noDuplicateObjectKeys": "warn",
        "noExplicitAny": "off",
        "noEmptyInterface": "off"
      },
      "style": {
        "noUselessElse": "warn"
      },
      "nursery": {
        "noDuplicateProperties": "warn"
      },
      "correctness": {
        "noUnusedImports": "warn",
        "useExhaustiveDependencies": "off"
      },
      "complexity": {
        "noBannedTypes": "warn"
      }
    }
  },
  "files": {
    "ignore": ["dist", "node_modules"]
  }
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/renderer/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "renderer/components",
    "utils": "renderer/utils",
    "ui": "renderer/components/ui",
    "lib": "renderer/lib",
    "hooks": "renderer/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="electron-builder.ts">
import type { Configuration } from 'electron-builder'

import {
  main,
  name,
  version,
  resources,
  description,
  displayName,
  author as _author,
} from './package.json'

import { getDevFolder } from './src/lib/electron-app/release/utils/path'

const author = _author?.name ?? _author
const currentYear = new Date().getFullYear()
const authorInKebabCase = author.replace(/\s+/g, '-')
const appId = `com.${authorInKebabCase}.${name}`.toLowerCase()

const artifactName = [`${name}-v${version}`, '-${os}.${ext}'].join('')

export default {
  appId,
  productName: displayName,
  copyright: `Copyright ¬© ${currentYear} ‚Äî ${author}`,

  directories: {
    app: getDevFolder(main),
    output: `dist/v${version}`,
  },

  mac: {
    artifactName,
    icon: `${resources}/build/icons/icon.icns`,
    category: 'public.app-category.utilities',
    target: ['zip', 'dmg', 'dir'],
  },

  linux: {
    artifactName,
    category: 'Utilities',
    synopsis: description,
    target: ['AppImage', 'deb', 'pacman', 'freebsd', 'rpm'],
  },

  win: {
    artifactName,
    icon: `${resources}/build/icons/icon.ico`,
    target: ['zip', 'portable'],
  },
} satisfies Configuration
</file>

<file path="electron.vite.config.ts">
import { defineConfig, externalizeDepsPlugin } from 'electron-vite'
import { codeInspectorPlugin } from 'code-inspector-plugin'
import { resolve, normalize, dirname } from 'node:path'
import tailwindcss from '@tailwindcss/vite'

import injectProcessEnvPlugin from 'rollup-plugin-inject-process-env'
import tsconfigPathsPlugin from 'vite-tsconfig-paths'
import reactPlugin from '@vitejs/plugin-react'

import { settings } from './src/lib/electron-router-dom'
import { main, resources } from './package.json'

const [nodeModules, devFolder] = normalize(dirname(main)).split(/\/|\\/g)
const devPath = [nodeModules, devFolder].join('/')

const tsconfigPaths = tsconfigPathsPlugin({
  projects: [resolve('tsconfig.json')],
})

export default defineConfig({
  main: {
    plugins: [tsconfigPaths, externalizeDepsPlugin()],

    build: {
      rollupOptions: {
        input: {
          index: resolve('src/main/index.ts'),
        },

        output: {
          dir: resolve(devPath, 'main'),
        },
      },
    },
  },

  preload: {
    plugins: [tsconfigPaths, externalizeDepsPlugin()],

    build: {
      outDir: resolve(devPath, 'preload'),
    },
  },

  renderer: {
    define: {
      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
      'process.platform': JSON.stringify(process.platform),
    },

    server: {
      port: settings.port,
    },

    plugins: [
      tsconfigPaths,
      tailwindcss(),
      reactPlugin(),

      codeInspectorPlugin({
        bundler: 'vite',
        hotKeys: ['altKey'],
        hideConsole: true,
      }),
    ],

    publicDir: resolve(resources, 'public'),

    build: {
      outDir: resolve(devPath, 'renderer'),

      rollupOptions: {
        plugins: [
          injectProcessEnvPlugin({
            NODE_ENV: 'production',
            platform: process.platform,
          }),
        ],

        input: {
          index: resolve('src/renderer/index.html'),
        },

        output: {
          dir: resolve(devPath, 'renderer'),
        },
      },
    },
  },
})
</file>

<file path="index.d.ts">
/// <reference types="vite/client" />
</file>

<file path="package.json">
{
  "displayName": "My Electron App",
  "name": "my-electron-app",
  "description": "Your awesome app description",
  "version": "0.0.0",
  "main": "./node_modules/.dev/main/index.js",
  "resources": "src/resources",
  "author": {
    "name": "Bradley",
    "email": "bradley-mccourt@outlook.com"
  },
  "license": "MIT",
  "packageManager": "pnpm@10.0.0",
  "pnpm": {
    "onlyBuiltDependenciesFile": "./trusted-dependencies-scripts.json"
  },
  "scripts": {
    "start": "electron-vite preview",
    "predev": "run-s clean:dev",
    "dev": "cross-env NODE_ENV=development electron-vite dev --watch",
    "compile:app": "electron-vite build",
    "compile:packageJSON": "tsx ./src/lib/electron-app/release/modules/prebuild.ts",
    "prebuild": "run-s clean:dev compile:app compile:packageJSON",
    "build": "pnpm electron-builder",
    "postinstall": "run-s prebuild install:deps",
    "install:deps": "electron-builder install-app-deps",
    "make:release": "tsx ./src/lib/electron-app/release/modules/release.ts",
    "release": "electron-builder --publish always",
    "clean:dev": "rimraf ./node_modules/.dev",
    "lint": "biome lint --no-errors-on-unmatched",
    "lint:fix": "biome lint --write --no-errors-on-unmatched"
  },
  "dependencies": {
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "electron-router-dom": "^2.1.0",
    "lucide-react": "^0.477.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.2.0",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@biomejs/biome": "^1.9.4",
    "@tailwindcss/vite": "^4.0.9",
    "@types/node": "^22.13.8",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@types/semver": "^7.5.8",
    "@vitejs/plugin-react": "^4.0.4",
    "code-inspector-plugin": "^0.20.1",
    "cross-env": "^7.0.3",
    "electron": "^34.3.0",
    "electron-builder": "^25.1.8",
    "electron-extension-installer": "^1.2.0",
    "electron-vite": "^3.0.0",
    "npm-run-all": "^4.1.5",
    "open": "^10.1.0",
    "rimraf": "^6.0.1",
    "rollup-plugin-inject-process-env": "^1.3.1",
    "semver": "^7.5.4",
    "tailwindcss": "^4.0.9",
    "tsx": "^4.19.3",
    "typescript": "^5.1.6",
    "vite": "^6.2.0",
    "vite-tsconfig-paths": "^5.1.4"
  }
}
</file>

<file path="README.md">
# qNotez
</file>

<file path="trusted-dependencies-scripts.json">
["electron", "electron-vite", "@biomejs/biome"]
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "strict": true,
    "target": "esnext",
    "lib": ["esnext", "dom", "dom.iterable"],
    "jsx": "react-jsx",
    "importHelpers": true,
    "moduleResolution": "bundler",
    "module": "ESNext",
    "resolveJsonModule": true,
    "esModuleInterop": true,
    "sourceMap": true,
    "isolatedModules": true,
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "baseUrl": ".",
    "paths": {
      "*": ["src/*"],
      "~/*": ["./*"]
    }
  },
  "include": [
    "./src",
    "electron.vite.config.*",
    "electron-builder.ts",
    "index.d.ts"
  ],
  "exclude": ["node_modules"]
}
</file>

</files>
